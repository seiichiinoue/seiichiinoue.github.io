<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on いのうの作業ログ</title>
    <link>https://seiichiinoue.github.io/post/</link>
    <description>Recent content in Posts on いのうの作業ログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sat, 08 Feb 2020 09:14:16 +0900</lastBuildDate>
    
	<atom:link href="https://seiichiinoue.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>多変量入力におけるガウスカーネルの計算法</title>
      <link>https://seiichiinoue.github.io/post/mlrbf/</link>
      <pubDate>Sat, 08 Feb 2020 09:14:16 +0900</pubDate>
      
      <guid>https://seiichiinoue.github.io/post/mlrbf/</guid>
      <description>ガウス過程の勉強をしていて，多変量の入力に対するカーネル関数の計算に躓いたので，ガウスカーネルに限定してメモしておきます． ガウスカーネル ガウ</description>
    </item>
    
    <item>
      <title>トピックモデルを用いた類似記事のレコメンド機能の実装</title>
      <link>https://seiichiinoue.github.io/post/tmrecom/</link>
      <pubDate>Fri, 31 Jan 2020 20:20:13 +0900</pubDate>
      
      <guid>https://seiichiinoue.github.io/post/tmrecom/</guid>
      <description>久々の更新となります．トピックモデルによる文書分類を用いてこのブログのレコメンド機能を実装したので，まとめていきたいと思います． 大まかな流れ</description>
    </item>
    
    <item>
      <title>boost-pythonのdockerfileを作成した</title>
      <link>https://seiichiinoue.github.io/post/boostenv/</link>
      <pubDate>Sat, 21 Dec 2019 01:52:57 +0900</pubDate>
      
      <guid>https://seiichiinoue.github.io/post/boostenv/</guid>
      <description>環境構築って大変ですよね．以降また使用するときに面倒臭くないよう，以前論文実装1で使用したboost-pythonが動く仮想環境を作成したの</description>
    </item>
    
    <item>
      <title>Binary Indexed Treeの実装</title>
      <link>https://seiichiinoue.github.io/post/bit/</link>
      <pubDate>Wed, 27 Nov 2019 11:50:45 +0900</pubDate>
      
      <guid>https://seiichiinoue.github.io/post/bit/</guid>
      <description>Binary Indexed Treeとは 簡単に説明すると，BIT，またはフェニック木は，ある変数列の部分和の計算と要素の更新を効率よくできる木構造です． どういう時に</description>
    </item>
    
    <item>
      <title>拡張Euclidの互除法による逆元計算</title>
      <link>https://seiichiinoue.github.io/post/modinv/</link>
      <pubDate>Sun, 17 Nov 2019 01:55:58 +0900</pubDate>
      
      <guid>https://seiichiinoue.github.io/post/modinv/</guid>
      <description>atcoderでmod計算に困ったので，次から困らないようにマクロを書いてやろうと思い調査した．今回の問題は，modを使ったもので，組み合わ</description>
    </item>
    
    <item>
      <title>Pitman-Yor過程に基づく可変長n-gram言語モデルの実装</title>
      <link>https://seiichiinoue.github.io/post/vpylm/</link>
      <pubDate>Tue, 05 Nov 2019 10:19:16 +0900</pubDate>
      
      <guid>https://seiichiinoue.github.io/post/vpylm/</guid>
      <description>前々回の品詞推定，前回のトピックモデルに続いて今回は言語モデルの実装を行いました（少し順序が前後してしまいましたが）．実装はseiichii</description>
    </item>
    
    <item>
      <title>ガウス過程に基づく連続空間トピックモデルの実装</title>
      <link>https://seiichiinoue.github.io/post/cstm/</link>
      <pubDate>Wed, 23 Oct 2019 01:32:07 +0900</pubDate>
      
      <guid>https://seiichiinoue.github.io/post/cstm/</guid>
      <description>ガウス過程に基づく連続空間トピックモデル(CSTM)は，単語に潜在空間における座標を明示的に与え，その上にガウス過程を考えることによって，通</description>
    </item>
    
    <item>
      <title>boost-pythonを使う</title>
      <link>https://seiichiinoue.github.io/post/boost/</link>
      <pubDate>Sat, 19 Oct 2019 13:30:08 +0900</pubDate>
      
      <guid>https://seiichiinoue.github.io/post/boost/</guid>
      <description>経緯 最近実装しているトピックモデルは，計算量の都合上C++で書いていたんですが，学習後の潜在座標を可視化するのに，Pythonのプロットツー</description>
    </item>
    
    <item>
      <title>C&#43;&#43;でディレクトリ下のファイル一覧を取得する</title>
      <link>https://seiichiinoue.github.io/post/getdir/</link>
      <pubDate>Wed, 16 Oct 2019 08:39:34 +0900</pubDate>
      
      <guid>https://seiichiinoue.github.io/post/getdir/</guid>
      <description>C言語のreaddirを利用する．これは，dirent.hで定義されてるのでインクルードしておく． 以下のように使える． #include &amp;lt;iostream&amp;gt;#include &amp;lt;cstdlib&amp;gt;#include &amp;lt;dirent.h&amp;gt; int main() { const char* path =</description>
    </item>
    
    <item>
      <title>自作C(風)コンパイラの作成</title>
      <link>https://seiichiinoue.github.io/post/scc/</link>
      <pubDate>Fri, 04 Oct 2019 16:57:07 +0900</pubDate>
      
      <guid>https://seiichiinoue.github.io/post/scc/</guid>
      <description>結果 最近は空き時間を見つけては自作コンパイラの実装を進めるをしていました．結果，以下のような簡単なコードをコンパイルできるようになりました．</description>
    </item>
    
    <item>
      <title>Hidden Markov Modelの実装</title>
      <link>https://seiichiinoue.github.io/post/hmm/</link>
      <pubDate>Tue, 24 Sep 2019 01:11:56 +0900</pubDate>
      
      <guid>https://seiichiinoue.github.io/post/hmm/</guid>
      <description>隠れマルコフモデルとviterbiアルゴリズムを使用した教師なし品詞推定の実装を行いました．実装はseiichiinoue/hmmに公開して</description>
    </item>
    
    <item>
      <title>[備忘録] xcodeアップデートの際のgcc設定</title>
      <link>https://seiichiinoue.github.io/post/gcclink/</link>
      <pubDate>Sat, 21 Sep 2019 19:40:06 +0900</pubDate>
      
      <guid>https://seiichiinoue.github.io/post/gcclink/</guid>
      <description>gccのアップデート まずは，最新のgccをインストールする．私の場合，macなのでbrewで一発で入る． $ brew reinstall gcc リンクの貼り直し まず，gcc</description>
    </item>
    
    <item>
      <title>C&#43;&#43;の配列とポインタのメモ</title>
      <link>https://seiichiinoue.github.io/post/pointer/</link>
      <pubDate>Wed, 04 Sep 2019 00:14:32 +0900</pubDate>
      
      <guid>https://seiichiinoue.github.io/post/pointer/</guid>
      <description>C++のポインタについて色々と調べたのでメモ． アドレスとポインタ アドレスは，値が格納されているメモリの位置のこと．変数のアドレスは以下のよう</description>
    </item>
    
    <item>
      <title>競プロ用ライブラリをC&#43;&#43;で書く</title>
      <link>https://seiichiinoue.github.io/post/procon/</link>
      <pubDate>Wed, 28 Aug 2019 09:38:12 +0900</pubDate>
      
      <guid>https://seiichiinoue.github.io/post/procon/</guid>
      <description>C++で競プロの問題を解くようになって1ヶ月ほど経ち，そろそろ本番でも使用していきたいと思い，復習がてらPythonで書いていた競プロ用ライ</description>
    </item>
    
    <item>
      <title>DockerでUbuntuの環境を構築する</title>
      <link>https://seiichiinoue.github.io/post/docker/</link>
      <pubDate>Tue, 13 Aug 2019 04:07:58 +0900</pubDate>
      
      <guid>https://seiichiinoue.github.io/post/docker/</guid>
      <description>最近，Rui Ueyamaさんのコンパイラ本を参考にコンパイラを作成しているのですが，推奨環境がLinuxだったのでDockerで仮想環境を作</description>
    </item>
    
    <item>
      <title>segfaultについて</title>
      <link>https://seiichiinoue.github.io/post/segfault/</link>
      <pubDate>Thu, 08 Aug 2019 19:49:32 +0900</pubDate>
      
      <guid>https://seiichiinoue.github.io/post/segfault/</guid>
      <description>今回は，コンパイルは通ったのに実行時にエラーSegmentation fault: 11が出てしまった件について． 問題のコードはこちら．ちょっとややこしい</description>
    </item>
    
    <item>
      <title>Mathjax記法メモ</title>
      <link>https://seiichiinoue.github.io/post/mathjax/</link>
      <pubDate>Thu, 08 Aug 2019 11:33:40 +0900</pubDate>
      
      <guid>https://seiichiinoue.github.io/post/mathjax/</guid>
      <description>hugoで数式を書く際にはmathjaxを使用しているのですが，若干記法が違うらしく，読み込んでくれなかったためメモ． 経験上，.mdに直接数</description>
    </item>
    
    <item>
      <title>自然言語処理(ML)の論文まとめ</title>
      <link>https://seiichiinoue.github.io/post/nlp/</link>
      <pubDate>Wed, 07 Aug 2019 08:34:41 +0900</pubDate>
      
      <guid>https://seiichiinoue.github.io/post/nlp/</guid>
      <description>Word2Vec 論文: Efficient Estimation of Word Representations in Vector Space 大量のテキストデータを用いて学習を行い，各単語の意味を推論によって表現する方法． CBOWモデル(周辺の単語からターゲ</description>
    </item>
    
    <item>
      <title>ABC136 D - Gathering Children</title>
      <link>https://seiichiinoue.github.io/post/abc136/</link>
      <pubDate>Mon, 05 Aug 2019 01:09:47 +0900</pubDate>
      
      <guid>https://seiichiinoue.github.io/post/abc136/</guid>
      <description>ABC136のD問題をC++で解いたのでメモ．(コンテスト中は解けませんでした) 問題 マスの情報を表す$L$と$R$で構成された文字列$S$が</description>
    </item>
    
    <item>
      <title>C&#43;&#43;のLanguage Server設定メモ</title>
      <link>https://seiichiinoue.github.io/post/cpplsp/</link>
      <pubDate>Sat, 03 Aug 2019 15:58:25 +0900</pubDate>
      
      <guid>https://seiichiinoue.github.io/post/cpplsp/</guid>
      <description>neovimでC++のファイルを編集しようとした際にlanguage server周りの設定が少し面倒だったのでメモ． Language Server Protocol Language Server Protoco</description>
    </item>
    
    <item>
      <title>ABC134 C - Exception Handling</title>
      <link>https://seiichiinoue.github.io/post/abc134/</link>
      <pubDate>Thu, 01 Aug 2019 16:45:52 +0900</pubDate>
      
      <guid>https://seiichiinoue.github.io/post/abc134/</guid>
      <description>最近，C++で競技プログラミングの練習をしているのですが，もともとPythonで解いていたものとしては慣れない部分が多く苦労しています． 今回</description>
    </item>
    
    <item>
      <title>[論文サーベイ] RoBERTa</title>
      <link>https://seiichiinoue.github.io/post/roberta/</link>
      <pubDate>Wed, 31 Jul 2019 03:13:29 +0900</pubDate>
      
      <guid>https://seiichiinoue.github.io/post/roberta/</guid>
      <description>先日，Facebook AIがGLUEやSQuADでGoogleのBERTを超えたと話題になっていたモデルの論文を公開したらしいので概要をまと</description>
    </item>
    
    <item>
      <title>トービットモデルにおける逆ミルズ比の解釈</title>
      <link>https://seiichiinoue.github.io/post/tobit/</link>
      <pubDate>Wed, 31 Jul 2019 00:57:04 +0900</pubDate>
      
      <guid>https://seiichiinoue.github.io/post/tobit/</guid>
      <description>計量経済学を勉強している中で，制限従属変数の推定で出てくるミルズ比でちょっとつまずいたのでメモ． データの性質 分析の対象となる従属変数（被説明</description>
    </item>
    
    <item>
      <title>[論文実装] LSGAN</title>
      <link>https://seiichiinoue.github.io/post/lsgan/</link>
      <pubDate>Tue, 30 Jul 2019 21:51:42 +0900</pubDate>
      
      <guid>https://seiichiinoue.github.io/post/lsgan/</guid>
      <description>最近、Least Squares Generative Adversarial Networksを読んだので、Pytorchで実装してみました。本当はアニメ顔生成モデルを作りたかったのですが、ローカ</description>
    </item>
    
    <item>
      <title>ブログを始めました</title>
      <link>https://seiichiinoue.github.io/post/0729/</link>
      <pubDate>Mon, 29 Jul 2019 18:52:16 +0900</pubDate>
      
      <guid>https://seiichiinoue.github.io/post/0729/</guid>
      <description>ブログを始めました 続くかわかりませんが，ブログを始めました．主に技術メモ，論文読みのスタックとして使っていきたいと思います．</description>
    </item>
    
    <item>
      <title></title>
      <link>https://seiichiinoue.github.io/post/tmp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://seiichiinoue.github.io/post/tmp/</guid>
      <description> test </description>
    </item>
    
  </channel>
</rss>